# Snippets for algorithmic programming competition

snippet compete
	#include <iostream>
	#include <vector>
	#include <string>
	#include <algorithm>
	#include <functional>
	#include <queue>
	//#include <map>
	#include <stdio.h>
	using namespace std;
	typedef long long ll;
	typedef pair<int, int> PII;
	typedef vector<int> VI;
	typedef vector<VI> VVI;
	#define rep(i,n) for (int i = 0; i < (int)(n); i++)
	#define all(c) (c).begin(), (c).end()
	
	int main() {
		${1}
		return 0;
	}
	

snippet ford
	for (int ${2:i} = ${1:count}; $2 >= 0; $2--) {
		${3}
	}

snippet while
	while (${1:true}) {
		${2}
	}

snippet whilecin
	while (cin >> ${1:n} >> ${2:m}, $1 || $2) {
		${3}
	}

snippet cinarr
	rep(${1:i},${2:n}) {
		cin >> ${3:arr}[$1];
	}

snippet coutarr
	rep(${1:i},${2:n}) {
		cout << ${3:arr}[$1] << endl;
	}

snippet consts
	const int INF = 1000000000;
	int dx[] = {0,1,0,-1};
	int dy[] = {-1,0,1,0};


# algorithms

snippet comparable
	struct ${1:State} {
		int ${2:x};
		int ${3:y};
		int ${4:cost};
		$1(int $2, int $3, int $4) : $2($2), $3($3), $4($4) {}
		
		const bool operator< (const $1& other) const {
			return $4 ${5:<} other.$4;
		}
	};

snippet unionfind
	struct UnionFind {
		vector<int> data;
		UnionFind(int size) {
			for (int i = 0; i < size; i++) {
				data[i] = i;
			}
		}
		int find(int x) {
			if(data[x] == x)
				return x;
			else
				return data[x] = find(data[x]);
		}
		void unite(int x, int y) {
			data[x] = data[y];
		}
	};
	
snippet primes
	bool is_prime[${1:SIZE}];
	int primes[$1 / 5];
	int primes_length = 0;
	
	void generate_table() {
		for(int i = 0; i < $1; i++) {
			is_prime[i] = true;
		}
		is_prime[0] = is_prime[1] = false;
		
		for(int i = 0; i < 1000; i++) {
			if(!is_prime[i]) continue;
			
			primes[primes_length++] = i;
			
			for(int j = i*2; j < $1; j += i) {
				is_prime[j] = false;
			}
		}
	}


snippet permutation
	vector<int> ${1:perm}(${2:n}, 0);
	rep(i,$2) $1[i] = i;
	do {
		${3}
	} while(next_permutation($1.begin(), $1.end()));
